name: Main workflow
on:
  push:
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"

jobs:
  # Run the `rustfmt` code formatter
  rustfmt:
    name: Rustfmt [Formatter]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # Run the `clippy` linting tool
  clippy:
    name: Clippy [Linter]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D clippy::all

  # Run a security audit on dependencies
  audit:
    name: Cargo Audit [Security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Ensure that the project could be successfully compiled
  check:
    name: Cargo Check [Compile]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

    # Ensure that the project could be successfully compiled
  test:
    name: Cargo Test [Test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/cargo@v1
        with:
          command: test

  # Create GitHub release with Rust build targets and release notes
  build_release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [rustfmt, clippy, audit, check, test]
    name: Build GitHub Release
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
          - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: rualdi-x86_64-unknown-linux-gnu.tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: rualdi-x86_64-unknown-linux-musl.tar.gz
          - target: armv7-unknown-linux-musleabihf
            os: ubuntu-latest
            name: rualdi-armv7-unknown-linux-musleabihf.tar.gz
          - target: x86_64-apple-darwin
            os: macOS-latest
            name: rualdi-x86_64-apple-darwin.tar.gz
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set version
        id: tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install musl tools
        if: contains(matrix.target, 'musl')
        run: sudo apt-get install -y musl-tools

      - name: Install armv7 tools
        if: contains(matrix.target, 'armv7')
        run: sudo apt-get install -y gcc-arm-linux-gnueabihf

      - name: Build x86_64 target
        if: startsWith(matrix.target, 'x86_64')
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Build armv7 target
        if: startsWith(matrix.target, 'armv7')
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Strip x86_64 artifacts
        if: startsWith(matrix.target, 'x86_64')
        run: |
          cd target/${{ matrix.target }}/release
          strip rualdi
          cd -

      - name: Strip armv7 artifacts
        if: startsWith(matrix.target, 'armv7')
        run: |
          cd target/${{ matrix.target }}/release
          arm-linux-gnueabihf-strip rualdi
          cd -

      - name: Prepare build artifacts [-nix]
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ matrix.name }} rualdi
          cd -

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

      - name: Generate release notes
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          # Temporary fix for https://github.com/actions/setup-go/issues/14
          export PATH=$PATH:$(go env GOPATH)/bin
          go get -u github.com/git-chglog/git-chglog/cmd/git-chglog
          git-chglog -c .github/chglog/release.yml $(git describe --tags) > RELEASE.md

      - name: Create GitHub release
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.name }}
          body_path: RELEASE.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        if: matrix.target != 'x86_64-unknown-linux-gnu'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_deb:
    needs: [build_release]
    name: Build GitHub deb package Release
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: armv7-unknown-linux-musleabihf
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set version
        id: tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Build deb x86_64 package
        if: startsWith(matrix.target, 'x86_64')
        uses: ebbflow-io/cargo-deb-amd64-ubuntu@1.0
        with:
          cmd: cargo deb --target=${{ matrix.target }} -p rualdi --deb-version ${{ steps.tag.outputs.tag }} -o rualdi_${{ steps.tag.outputs.tag }}_${{ matrix.target }}.deb

      - name: Build deb armv7 package
        if: startsWith(matrix.target, 'armv7')
        uses: ebbflow-io/cargo-deb-armv7-debian@1.0
        with:
          cmd: cargo deb --target=${{ matrix.target }} -p rualdi --deb-version ${{ steps.tag.outputs.tag }} -o rualdi_${{ steps.tag.outputs.tag }}_${{ matrix.target }}.deb --no-strip

      - name: Upload deb artifact
        if: contains(matrix.target, 'linux')
        uses: actions/upload-artifact@v2
        with:
          name: rualdi_${{ steps.tag.outputs.tag }}_${{ matrix.target }}.deb
          path: rualdi_${{ steps.tag.outputs.tag }}_${{ matrix.target }}.deb

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: rualdi_${{ steps.tag.outputs.tag }}_${{ matrix.target }}.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_rpm_fedora:
    needs: [build_release]
    name: Build GitHub rpm Fedora package Release
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set version
        id: tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Build rpm package
        uses: ebbflow-io/cargo-rpm-amd64-fedora@1.0
        with:
          cmd: cd rualdi && cargo rpm -t ${{ matrix.target }} -o ../rualdi_${{ steps.tag.outputs.tag }}_${{ matrix.target }}_fedora.rpm

      - name: Upload rpm Fedora artifact
        uses: actions/upload-artifact@v2
        with:
          name: rualdi_${{ steps.tag.outputs.tag }}_${{ matrix.target }}_fedora.rpm
          path: rualdi_${{ steps.tag.outputs.tag }}_${{ matrix.target }}_fedora.rpm

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: rualdi_${{ steps.tag.outputs.tag }}_${{ matrix.target }}_fedora.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_rpm_opensuseleap:
    needs: [build_release]
    name: Build GitHub rpm OpenSUSE Leap package Release
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set version
        id: tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
        
      - name: Build rpm package
        uses: ebbflow-io/cargo-rpm-amd64-opensuseleap@1.0
        with:
          cmd: cd rualdi && cargo rpm -t ${{ matrix.target }} -o ../rualdi_${{ steps.tag.outputs.tag }}_${{ matrix.target }}_opensuseleap.rpm

      - name: Upload rpm OpenSUSE Leap artifact
        uses: actions/upload-artifact@v2
        with:
          name: rualdi_${{ steps.tag.outputs.tag }}_${{ matrix.target }}_opensuseleap.rpm
          path: rualdi_${{ steps.tag.outputs.tag }}_${{ matrix.target }}_opensuseleap.rpm

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: rualdi_${{ steps.tag.outputs.tag }}_${{ matrix.target }}_opensuseleap.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
